https://docs.google.com/spreadsheets/d/1C8f1La1AwAuFbdqHRc-dsW4omHb_nCWJlgu6zRwZgnI/edit?usp=drive_link

102522954974105826031


OK: Let's address formatting:

1. GDOC_TARGET now contains a Table with a header row defined as follows:
   DATE, MILES, ROUTE, ROUTE LINK
2. Here is how data is mapped:
    A. DATE >> DATE
    B. MILE >> MILES
    C. ROUTE >> An order list of way points from Start to Finish.
       List items are comprised as follows: Purpose (Street Address)
       Street Address is a link to the street address on Google Maps
    D. ROUTE LINK >> The word "Route Link" linked to the Rout generated by Google Maps.



Here is the ordered list of work.  Let's address each list item one at a time.  Generate only the revised files needed to make the desired change.

1. FILE HEADER: Ensure every file has a commented header that looks like this:

# FILE: <filename>
# VERSION: <version number>
######################################
# CHANGELOG
######################################
# 1. <changes>

With each iteration, update the version number, clear the change log and write only the changes made in the given revision pass.  These files are maintained in Git, so I'll have the full changelog available to me.

2. Miles Accuracy: Change the way we derive miles driven.  Currently, we have Routes API calculate it and the number is always higher than the number provided by the Directions API when generating a mapped route. Instead of current method, let's just extract the miles driven from the Directions map we are generating and linking to.
3. write_to_drive: Resolve this by changing code to consider "DRIVE" the default option.
4. Caching: You suggested Caching for performance improvement and I think that is a great idea. Let's cache our Maps API data on the local drive in a folder called cache.  Then, let's have the code look for and, if available, reference the cache first.
5. Error Handling: Make this as robust and human readable as possible.
6. Logging: As with Error Handling, make this as robust and human readable as possible.
7. Data Cleanse: Ignore for the moment. This is handled by the attached code and not currently in use. Note it for future development.
8. Unused Variables: Ignore for the moment. They are placeholders for future development.
9. Performance Improvements: Ignore for the moment.  Once base functions are operational, I will ask for a Performance Improvement (PI) pass on the codebase.
10. Code Clarity and Maintainability: Ignore for the moment.  Once base functions are operational, I will ask for a  Code Clarity and Maintainability (CCM) pass on the codebase.
11. Configuration Management: Ignore for the moment.  Once base functions are operational, I will ask for a  Configuration Management (CM) pass on the codebase.
12. Testing: Ignore for the moment,